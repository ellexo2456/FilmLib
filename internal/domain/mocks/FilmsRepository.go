// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/ellexo2456/FilmLib/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// FilmsRepository is an autogenerated mock type for the FilmsRepository type
type FilmsRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *FilmsRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: film
func (_m *FilmsRepository) Insert(film domain.Film) (int, error) {
	ret := _m.Called(film)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Film) (int, error)); ok {
		return rf(film)
	}
	if rf, ok := ret.Get(0).(func(domain.Film) int); ok {
		r0 = rf(film)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(domain.Film) error); ok {
		r1 = rf(film)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: searchStr
func (_m *FilmsRepository) Search(searchStr string) ([]domain.Film, error) {
	ret := _m.Called(searchStr)

	var r0 []domain.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Film, error)); ok {
		return rf(searchStr)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Film); ok {
		r0 = rf(searchStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(searchStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields:
func (_m *FilmsRepository) SelectAll() ([]domain.Film, error) {
	ret := _m.Called()

	var r0 []domain.Film
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Film, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Film); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Film)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: id
func (_m *FilmsRepository) SelectById(id int) (domain.Film, error) {
	ret := _m.Called(id)

	var r0 domain.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Film, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Film); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Film)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: film
func (_m *FilmsRepository) Update(film domain.Film) (domain.Film, error) {
	ret := _m.Called(film)

	var r0 domain.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Film) (domain.Film, error)); ok {
		return rf(film)
	}
	if rf, ok := ret.Get(0).(func(domain.Film) domain.Film); ok {
		r0 = rf(film)
	} else {
		r0 = ret.Get(0).(domain.Film)
	}

	if rf, ok := ret.Get(1).(func(domain.Film) error); ok {
		r1 = rf(film)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFilmsRepository creates a new instance of FilmsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilmsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilmsRepository {
	mock := &FilmsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
