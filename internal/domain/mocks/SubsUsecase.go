// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// SubsUsecase is an autogenerated mock type for the SubsUsecase type
type SubsUsecase struct {
	mock.Mock
}

// CheckSub provides a mock function with given fields: userId
func (_m *SubsUsecase) CheckSub(userId int) (time.Time, bool, error) {
	ret := _m.Called(userId)

	var r0 time.Time
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (time.Time, bool, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) time.Time); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Subscribe provides a mock function with given fields: userId
func (_m *SubsUsecase) Subscribe(userId int) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnSubscribe provides a mock function with given fields: userId
func (_m *SubsUsecase) UnSubscribe(userId int) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubsUsecase creates a new instance of SubsUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubsUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubsUsecase {
	mock := &SubsUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
