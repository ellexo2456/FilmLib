// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/ellexo2456/FilmLib/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: credentials
func (_m *AuthUsecase) Login(credentials domain.Credentials) (domain.Session, int, error) {
	ret := _m.Called(credentials)

	var r0 domain.Session
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(domain.Credentials) (domain.Session, int, error)); ok {
		return rf(credentials)
	}
	if rf, ok := ret.Get(0).(func(domain.Credentials) domain.Session); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(domain.Session)
	}

	if rf, ok := ret.Get(1).(func(domain.Credentials) int); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(domain.Credentials) error); ok {
		r2 = rf(credentials)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Logout provides a mock function with given fields: token
func (_m *AuthUsecase) Logout(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: user
func (_m *AuthUsecase) Register(user domain.User) (int, error) {
	ret := _m.Called(user)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (int, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) int); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveSessionContext provides a mock function with given fields: token
func (_m *AuthUsecase) RetrieveSessionContext(token string) (domain.SessionContext, error) {
	ret := _m.Called(token)

	var r0 domain.SessionContext
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.SessionContext, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) domain.SessionContext); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(domain.SessionContext)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
