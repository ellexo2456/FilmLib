// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/ellexo2456/FilmLib/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ActorsUsecase is an autogenerated mock type for the ActorsUsecase type
type ActorsUsecase struct {
	mock.Mock
}

// Add provides a mock function with given fields: actor
func (_m *ActorsUsecase) Add(actor domain.Actor) (int, error) {
	ret := _m.Called(actor)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Actor) (int, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(domain.Actor) int); ok {
		r0 = rf(actor)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(domain.Actor) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *ActorsUsecase) GetAll() ([]domain.Actor, error) {
	ret := _m.Called()

	var r0 []domain.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Actor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Actor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Modify provides a mock function with given fields: actor
func (_m *ActorsUsecase) Modify(actor domain.Actor) (domain.Actor, error) {
	ret := _m.Called(actor)

	var r0 domain.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Actor) (domain.Actor, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(domain.Actor) domain.Actor); ok {
		r0 = rf(actor)
	} else {
		r0 = ret.Get(0).(domain.Actor)
	}

	if rf, ok := ret.Get(1).(func(domain.Actor) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: id
func (_m *ActorsUsecase) Remove(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewActorsUsecase creates a new instance of ActorsUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActorsUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActorsUsecase {
	mock := &ActorsUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
