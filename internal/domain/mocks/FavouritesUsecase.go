// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	domain "2023_2_Holi/domain"

	mock "github.com/stretchr/testify/mock"
)

// FavouritesUsecase is an autogenerated mock type for the FavouritesUsecase type
type FavouritesUsecase struct {
	mock.Mock
}

// AddToFavourites provides a mock function with given fields: videoID, userID
func (_m *FavouritesUsecase) AddToFavourites(videoID int, userID int) error {
	ret := _m.Called(videoID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(videoID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Favourite provides a mock function with given fields: videoID, userID
func (_m *FavouritesUsecase) Favourite(videoID int, userID int) (bool, error) {
	ret := _m.Called(videoID, userID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bool, error)); ok {
		return rf(videoID, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(videoID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(videoID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFavourites provides a mock function with given fields: userID
func (_m *FavouritesUsecase) GetAllFavourites(userID int) ([]domain.Video, error) {
	ret := _m.Called(userID)

	var r0 []domain.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Video, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Video); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFromFavourites provides a mock function with given fields: videoID, userID
func (_m *FavouritesUsecase) RemoveFromFavourites(videoID int, userID int) error {
	ret := _m.Called(videoID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(videoID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFavouritesUsecase creates a new instance of FavouritesUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFavouritesUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *FavouritesUsecase {
	mock := &FavouritesUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
