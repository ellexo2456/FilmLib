// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	domain "2023_2_Holi/domain"

	mock "github.com/stretchr/testify/mock"
)

// RatingRepository is an autogenerated mock type for the RatingRepository type
type RatingRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: rate
func (_m *RatingRepository) Delete(rate domain.Rate) (float64, error) {
	ret := _m.Called(rate)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Rate) (float64, error)); ok {
		return rf(rate)
	}
	if rf, ok := ret.Get(0).(func(domain.Rate) float64); ok {
		r0 = rf(rate)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(domain.Rate) error); ok {
		r1 = rf(rate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: rate
func (_m *RatingRepository) Exists(rate domain.Rate) (bool, int, error) {
	ret := _m.Called(rate)

	var r0 bool
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(domain.Rate) (bool, int, error)); ok {
		return rf(rate)
	}
	if rf, ok := ret.Get(0).(func(domain.Rate) bool); ok {
		r0 = rf(rate)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(domain.Rate) int); ok {
		r1 = rf(rate)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(domain.Rate) error); ok {
		r2 = rf(rate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Insert provides a mock function with given fields: rate
func (_m *RatingRepository) Insert(rate domain.Rate) (float64, error) {
	ret := _m.Called(rate)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Rate) (float64, error)); ok {
		return rf(rate)
	}
	if rf, ok := ret.Get(0).(func(domain.Rate) float64); ok {
		r0 = rf(rate)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(domain.Rate) error); ok {
		r1 = rf(rate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRatingRepository creates a new instance of RatingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRatingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RatingRepository {
	mock := &RatingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
